{
  "name": "direction-aware-tabs",
  "dependencies": [
    "framer-motion",
    "react-use-measure"
  ],
  "files": [
    {
      "name": "direction-aware-tabs.tsx",
      "content": "\"use client\"\n\nimport { ReactNode, useMemo, useState } from \"react\"\nimport { AnimatePresence, MotionConfig, motion } from \"framer-motion\"\nimport useMeasure from \"react-use-measure\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype Tab = {\n  id: number\n  label: string\n  content: ReactNode\n}\n\ninterface OgImageSectionProps {\n  tabs: Tab[]\n  className?: string\n  rounded?: string\n  onChange?: () => void\n}\n\nfunction DirectionAwareTabs({\n  tabs,\n  className,\n  rounded,\n  onChange,\n}: OgImageSectionProps) {\n  const [activeTab, setActiveTab] = useState(0)\n  const [direction, setDirection] = useState(0)\n  const [isAnimating, setIsAnimating] = useState(false)\n  const [ref, bounds] = useMeasure()\n\n  const content = useMemo(() => {\n    const activeTabContent = tabs.find((tab) => tab.id === activeTab)?.content\n    return activeTabContent || null\n  }, [activeTab, tabs])\n\n  const handleTabClick = (newTabId: number) => {\n    if (newTabId !== activeTab && !isAnimating) {\n      const newDirection = newTabId > activeTab ? 1 : -1\n      setDirection(newDirection)\n      setActiveTab(newTabId)\n      onChange ? onChange() : null\n    }\n  }\n\n  const variants = {\n    initial: (direction: number) => ({\n      x: 300 * direction,\n      opacity: 0,\n      filter: \"blur(4px)\",\n    }),\n    active: {\n      x: 0,\n      opacity: 1,\n      filter: \"blur(0px)\",\n    },\n    exit: (direction: number) => ({\n      x: -300 * direction,\n      opacity: 0,\n      filter: \"blur(4px)\",\n    }),\n  }\n\n  return (\n    <div className=\" flex flex-col items-center w-full\">\n      <div\n        className={cn(\n          \"flex space-x-1 border border-none rounded-full cursor-pointer bg-neutral-600 px-[3px] py-[3.2px] shadow-inner-shadow\",\n          className,\n          rounded\n        )}\n      >\n        {tabs.map((tab) => (\n          <button\n            key={tab.id}\n            onClick={() => handleTabClick(tab.id)}\n            className={cn(\n              \"relative rounded-full px-3.5 py-1.5 text-xs sm:text-sm font-medium text-neutral-200  transition focus-visible:outline-1 focus-visible:ring-1  focus-visible:outline-none flex gap-2 items-center \",\n              activeTab === tab.id\n                ? \"text-white\"\n                : \"hover:text-neutral-300/60  text-neutral-200/80\",\n              rounded\n            )}\n            style={{ WebkitTapHighlightColor: \"transparent\" }}\n          >\n            {activeTab === tab.id && (\n              <motion.span\n                layoutId=\"bubble\"\n                className=\"absolute  inset-0 z-10 bg-neutral-700 mix-blend-difference shadow-inner-shadow border border-white/10\"\n                style={rounded ? { borderRadius: 9 } : { borderRadius: 9999 }}\n                transition={{ type: \"spring\", bounce: 0.19, duration: 0.4 }}\n              />\n            )}\n\n            {tab.label}\n          </button>\n        ))}\n      </div>\n      <MotionConfig transition={{ duration: 0.4, type: \"spring\", bounce: 0.2 }}>\n        <motion.div\n          className=\"relative mx-auto w-full h-full overflow-hidden\"\n          initial={false}\n          animate={{ height: bounds.height }}\n        >\n          <div className=\"p-1\" ref={ref}>\n            <AnimatePresence\n              custom={direction}\n              mode=\"popLayout\"\n              onExitComplete={() => setIsAnimating(false)}\n            >\n              <motion.div\n                key={activeTab}\n                variants={variants}\n                initial=\"initial\"\n                animate=\"active\"\n                exit=\"exit\"\n                custom={direction}\n                onAnimationStart={() => setIsAnimating(true)}\n                onAnimationComplete={() => setIsAnimating(false)}\n              >\n                {content}\n              </motion.div>\n            </AnimatePresence>\n          </div>\n        </motion.div>\n      </MotionConfig>\n    </div>\n  )\n}\nexport { DirectionAwareTabs }\n"
    }
  ],
  "type": "components:ui"
}